diff --git a/dist/common/DefaultConfiguration.d.ts b/dist/common/DefaultConfiguration.d.ts
index c29ba67a34676ff262b4a0d63cd06f222d7c4de4..72dddf4fd138b709271b53d422ab27c03d7edee0 100644
--- a/dist/common/DefaultConfiguration.d.ts
+++ b/dist/common/DefaultConfiguration.d.ts
@@ -1,8 +1,6 @@
 import { ModelsDatastore } from '../datastore/ModelsDatastore';
 import { IConfiguration, DataStore, NoCacheManager, ILogger, IAppDelegate } from '../';
 declare class Configuration implements IConfiguration {
-    definitionsPath: string;
-    templatesPath: string;
     timers: {
         forceTimersDelay: number;
         precision: number;
diff --git a/dist/common/DefaultConfiguration.js b/dist/common/DefaultConfiguration.js
index 906edb32519a2f0e15fffe7bc18e101c94982f79..a6d73f506286c9f47e02a333d5cbaf55d6508ba1 100644
--- a/dist/common/DefaultConfiguration.js
+++ b/dist/common/DefaultConfiguration.js
@@ -5,7 +5,7 @@ const ModelsDatastore_1 = require("../datastore/ModelsDatastore");
 const DefaultAppDelegate_1 = require("../engine/DefaultAppDelegate");
 const __1 = require("../");
 const _1 = require("./");
-let definitionsPath = __dirname + '/processes/';
+// let definitionsPath = __dirname + '/processes/';
 class Configuration {
     definitions(server) {
         return new ModelsDatastore_1.ModelsDatastore(server);
@@ -34,8 +34,8 @@ class Configuration {
 }
 exports.Configuration = Configuration;
 var defaultConfiguration = new Configuration({
-    definitionsPath: definitionsPath,
-    templatesPath: __dirname + '/emailTemplates',
+    // definitionsPath: definitionsPath,
+    // templatesPath: __dirname + '/emailTemplates',
     timers: {
         forceTimersDelay: 1000,
         precision: 3000,
diff --git a/dist/elements/Tasks.js b/dist/elements/Tasks.js
index f4cea3e6b0fb1eac3437f80a1190126b03c90f84..3a50d117aa8eba250973d7544f2f52ad24160400 100644
--- a/dist/elements/Tasks.js
+++ b/dist/elements/Tasks.js
@@ -81,7 +81,7 @@ class ServiceTask extends Node_1.Node {
                 ret = yield obj[method](item.input, item.context);
             }
             else {
-                ret = yield appDelegate['serviceCalled'](item.input, item.context);
+                ret = yield appDelegate['serviceCalled'](item.input, item.context, item, this.serviceName);
             }
             item.log("service returned " + ret);
             item.output = ret;
diff --git a/dist/engine/DefaultAppDelegate.d.ts b/dist/engine/DefaultAppDelegate.d.ts
index 958e995425d0790563cf443bb8dbbe5172a82d4c..ae2eede724d31fb9ba916621759454143df42a66 100644
--- a/dist/engine/DefaultAppDelegate.d.ts
+++ b/dist/engine/DefaultAppDelegate.d.ts
@@ -1,8 +1,8 @@
-import { IExecution, Item, IAppDelegate } from "../";
+import { IExecution, Item, IAppDelegate, IServiceProvider } from "../";
 declare class DefaultAppDelegate implements IAppDelegate {
     server: any;
     constructor(server: any);
-    getServicesProvider(context: any): Promise<this>;
+    getServicesProvider(context: any): this | IServiceProvider | Promise<this> | Promise<IServiceProvider>;
     startUp(options: any): void;
     sendEmail(to: any, msg: any, body: any): void;
     get moddleOptions(): {
diff --git a/dist/engine/Execution.js b/dist/engine/Execution.js
index 498a2501abe3817d94628ad2d8b67a1ea5821ede..a287cc977c58ec6b1104256351cd375cba52f7c7 100644
--- a/dist/engine/Execution.js
+++ b/dist/engine/Execution.js
@@ -19,7 +19,7 @@ const __1 = require("../");
 const __2 = require("../");
 const server_1 = require("../server");
 const Model_1 = require("./Model");
-const { v4: uuidv4 } = require('uuid');
+const { v4: uuidv4 } = require('@lukeed/uuid');
 /**
  *  is accessed two ways:
  *      execute - start process
diff --git a/dist/interfaces/common.d.ts b/dist/interfaces/common.d.ts
index 9f1b96027aa5599bc3e1a79f2ced11d5fc40c1ea..86daf08d91cbae4f7350d549b3a49c317393e7b4 100644
--- a/dist/interfaces/common.d.ts
+++ b/dist/interfaces/common.d.ts
@@ -1,4 +1,4 @@
-import { IItem, IModelsDatastore, IDataStore, ICacheManager } from '../';
+import { IItem, IModelsDatastore, IDataStore, ICacheManager, IExecution } from '../';
 interface IConfiguration {
     definitionsPath: string;
     templatesPath: string;
@@ -58,6 +58,12 @@ interface ILogger {
     reportError(err: any): void;
     save(filename: any): Promise<void>;
 }
+/**
+ * Object to respond to all named services
+ */
+interface IServiceProvider {
+    [serviceName: string]: CallableFunction;
+}
 /**
  *  Application Delegate Object to respond to various events and services:
  *
@@ -69,7 +75,7 @@ interface ILogger {
  * */
 interface IAppDelegate {
     moddleOptions: any;
-    getServicesProvider(IExecution: any): any;
+    getServicesProvider(execution: IExecution): IAppDelegate | IServiceProvider | Promise<IAppDelegate> | Promise<IServiceProvider>;
     sendEmail(to: any, msg: any, body: any): any;
     executionStarted(execution: any): any;
     startUp(options: any): any;
@@ -91,4 +97,4 @@ interface IAppDelegate {
      */
     serviceCalled(serviceName: any, data: any, item: IItem): any;
 }
-export { ILogger, IAppDelegate, IConfiguration };
+export { ILogger, IAppDelegate, IConfiguration, IServiceProvider };
diff --git a/dist/interfaces/datastore.d.ts b/dist/interfaces/datastore.d.ts
index 76916f750685c95a331db309c003e2fe62f30feb..d48627ade36e016615840db52ea72323d6360f89 100644
--- a/dist/interfaces/datastore.d.ts
+++ b/dist/interfaces/datastore.d.ts
@@ -32,5 +32,6 @@ interface IModelsDatastore {
     saveModel(model: IBpmnModelData): Promise<boolean>;
     deleteModel(name: any, owner: any): Promise<void>;
     renameModel(name: any, newName: any, owner: any): Promise<boolean>;
+    rebuild(): any;
 }
 export { IDataStore, IModelsDatastore };
diff --git a/dist/server/BPMNServer.js b/dist/server/BPMNServer.js
index 8057dd10c4cc903c4854c10b09b0fb97884a7708..2d596c50fa8d9a0b04ccfbbd0c13f5a0b623b92a 100644
--- a/dist/server/BPMNServer.js
+++ b/dist/server/BPMNServer.js
@@ -5,18 +5,18 @@ const Logger_1 = require("../common/Logger");
 const Engine_1 = require("./Engine");
 const Cron_1 = require("./Cron");
 const events_1 = require("events");
-console.log('BPMNServer from ', __filename);
-process.on('uncaughtException', function (err) {
-    console.log('***************BPMNServer UNCAUGHT ERROR***********');
-    try {
-        BPMNServer.getInstance().error = err;
-        BPMNServer.getInstance().logger.reportError(err);
-    }
-    catch (exc) {
-        console.log(err);
-    }
-    return;
-});
+// console.log('BPMNServer from ', __filename);
+// process.on('uncaughtException', function (err) {
+//     console.log('***************BPMNServer UNCAUGHT ERROR***********');
+//     try {
+//         BPMNServer.getInstance().error = err;
+//         BPMNServer.getInstance().logger.reportError(err);
+//     }
+//     catch (exc) {
+//         console.log(err);
+//     }
+//     return;
+// });
 const fs = require('fs');
 /**
  *	The main class of Server Layer
@@ -72,6 +72,7 @@ class BPMNServer {
             memoryUsage: memoryUsage() };
     }
     static getVersion() {
+        if (typeof __dirname === 'undefined') return 'unknown';
         const configPath = __dirname + '/../../package.json';
         if (fs.existsSync(configPath)) {
             var configuration = JSON.parse(fs.readFileSync(configPath, 'utf8'));
diff --git a/src/interfaces/common.ts b/src/interfaces/common.ts
index 909e1c012596c501b15b77edb6002352a2ff4d1c..fe8a0f86db4f01d74fad88617a257c6155742fcc 100644
--- a/src/interfaces/common.ts
+++ b/src/interfaces/common.ts
@@ -68,6 +68,14 @@ interface ILogger {
     reportError(err: any): void;
     save(filename: any): Promise<void>;
 }
+
+/**
+ * Object to respond to all named services
+ */
+export interface IServiceProvider {
+    [serviceName: string]: CallableFunction;
+}
+
 /**
  *  Application Delegate Object to respond to various events and services:
  *  
@@ -79,7 +87,7 @@ interface ILogger {
  * */
 interface IAppDelegate {
     moddleOptions;
-    getServicesProvider(IExecution): any;       // to respond to all named services
+    getServicesProvider(execution: IExecution): IAppDelegate | IServiceProvider | Promise<IAppDelegate> | Promise<IServiceProvider>;
     sendEmail(to, msg, body);
     executionStarted(execution);
     startUp(options); // start of server
